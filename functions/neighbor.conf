include "predefined.conf";
include "regions.conf";
include "no_as_loop.conf";
include "rpki.conf";
include "blacklist.conf";

# MY_COMMUNITY = 199683
#
# Internal Community:
#  (MY_COMMUNITY,<999, 0)  Community for all my node
#  (MY_COMMUNITY,<999, 1)  Community only for this node
#  (MY_COMMUNITY,   1,*)   do not send to ibgp
#  (MY_COMMUNITY,   2,*)   do not send to ebgp
#  (MY_COMMUNITY,   3,*)   do not send to kernel
#  (MY_COMMUNITY,   4,*)   send to kernel but mark unreachable
#  (MY_COMMUNITY,   5,*)   send to kernel but mark blackhole
#  (MY_COMMUNITY, 101,*)   allow bgp_local_perf
#  (MY_COMMUNITY, 201,*)   transit routes
#  (MY_COMMUNITY, 202,*)   ixp rs routes
#  (MY_COMMUNITY, 203,*)   peer routes
#  (MY_COMMUNITY, 204,*)   customer routes
#  (MY_COMMUNITY, 205,1)   routes on this router
#  (MY_COMMUNITY, 209,*)   ibgp routes
#  (MY_COMMUNITY, 210,*)   self net routes
#
# Control Community:
#   Actions:
#    _ = 0   do not announce to target
#    _ = 1   prepend 1 to target
#    _ = 2   prepend 2 to target
#    _ = 4   prepend 4 to target
#    _ = 8   prepend 8 to target
#   Action target selector:
#    _ = Action
#    (MY_COMMUNITY,1_00,0)            Do action to everyone
#    (MY_COMMUNITY,1_01,asn)          Don't do action to this asn
#    (MY_COMMUNITY,1_02,asn)          Do action to this asn
#    (MY_COMMUNITY,1_10,0)            Do action to every region
#    (MY_COMMUNITY,1_11,region_code)  Don't do action to this region
#    (MY_COMMUNITY,1_12,region_code)  Do action to this region
#    (MY_COMMUNITY,1019,0)            Disable (asn,1010,0), (asn,1011,local_region) as default value
#    (MY_COMMUNITY,1_20,0)            Do action to every country
#    (MY_COMMUNITY,1_21,country_code) Don't do action to this country
#    (MY_COMMUNITY,1_22,country_code) Do action to this country
#    (MY_COMMUNITY,1_30,1)            Do action to upstreams
#    (MY_COMMUNITY,1_30,2)            Do action to ixp rs
#    (MY_COMMUNITY,1_30,3)            Do action to peers
#    (MY_COMMUNITY,1_30,4)            Do action to downstreams
#    (MY_COMMUNITY,1_30,8)            Do action to route collector
#   Examples:
#    prepend 11 to AS6939: [(MY_COMMUNITY,1102,6939),(MY_COMMUNITY,1202,6939),(MY_COMMUNITY,1802,6939)]
#    prepend 1 to everyone but 6939: [(MY_COMMUNITY,1100,6939),(MY_COMMUNITY,1101,6939)]
#    do not announce to anyone: [(MY_COMMUNITY,1000,0)]
#
# Informational Community
#  (MY_COMMUNITY,10000,region_code)    Received from region
#  (MY_COMMUNITY,10001,country_code)   Received from country
# 
# Region code:
#  * 41: Europe
#  * 42: North America-E
#  * 43: North America-C
#  * 44: North America-W
#  * 45: Central America
#  * 46: South America-E
#  * 47: South America-W
#  * 48: Africa-N (above Sahara)
#  * 49: Africa-S (below Sahara)
#  * 50: Asia-S (IN,PK,BD)
#  * 51: Asia-SE (TH,SG,PH,ID,MY)
#  * 52: Asia-E (JP,CN,KR)
#  * 53: Pacific&Oceania (AU,NZ,FJ)
#  * 54: Antarctica
#  * 55: Asia-N (RU)
#  * 56: Asia-W (IR,TR,UAE)
#  * 57: Central Asia (AF,UZ,KZ)
#
# Country code:
#  ISO-3166 numeric-3 country code


function delete_last(int lastval){
	bgp_large_community.delete([(MY_COMMUNITY,  1, lastval),
				(MY_COMMUNITY,  2, lastval),
				(MY_COMMUNITY,  3, lastval),
				(MY_COMMUNITY,  4, lastval),
				(MY_COMMUNITY,  5, lastval),
				(MY_COMMUNITY,101, lastval),
				(MY_COMMUNITY,201, lastval),
				(MY_COMMUNITY,202, lastval),
				(MY_COMMUNITY,203, lastval),
				(MY_COMMUNITY,204, lastval),
				(MY_COMMUNITY,205, lastval),
				(MY_COMMUNITY,209, lastval)]);
}

function add_geoinfo()
{
	if bgp_large_community !~ [(MY_COMMUNITY,10000,*),(MY_COMMUNITY,10001,*)] then {
		bgp_large_community.add((MY_COMMUNITY,10000,MY_REGION));
		bgp_large_community.add((MY_COMMUNITY,10001,MY_COUNTRY));
	}
	if (MY_COMMUNITY,1019,0) !~ bgp_large_community then {
		bgp_large_community.add((MY_COMMUNITY,1010,0));
		bgp_large_community.add((MY_COMMUNITY,1011,MY_REGION));
	}
}

function prepend_asn_pow(int prepend_pow;int PREPEND_ASN){
	if prepend_pow = 1 then {
		bgp_path.prepend(PREPEND_ASN);
	}
	if prepend_pow = 2 then {
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
	}
	if prepend_pow = 4 then {
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
	}
	if prepend_pow = 8 then {
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
		bgp_path.prepend(PREPEND_ASN);
	}
}

function prepend_asn(int prepend_num;int PREPEND_ASN){
	if prepend_num = 1 then {
		prepend_asn_pow(1,PREPEND_ASN);
	}
	if prepend_num = 2 then {
		prepend_asn_pow(2,PREPEND_ASN);
	}
	if prepend_num = 3 then {
		prepend_asn_pow(1,PREPEND_ASN);
		prepend_asn_pow(2,PREPEND_ASN);
	}
	if prepend_num = 4 then {
		prepend_asn_pow(4,PREPEND_ASN);
	}
	if prepend_num = 5 then {
		prepend_asn_pow(1,PREPEND_ASN);
		prepend_asn_pow(4,PREPEND_ASN);
	}
	if prepend_num = 6 then {
		prepend_asn_pow(2,PREPEND_ASN);
		prepend_asn_pow(4,PREPEND_ASN);
	}
	if prepend_num = 7 then {
		prepend_asn_pow(1,PREPEND_ASN);
		prepend_asn_pow(2,PREPEND_ASN);
		prepend_asn_pow(4,PREPEND_ASN);
	}
	if prepend_num = 8 then {
		prepend_asn_pow(8,PREPEND_ASN);
	}
}

function prepend_asn_multi(int times;int prepend_num;int PREPEND_ASN){
	if times = 1 then {
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 2 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 3 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 4 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 5 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 6 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 7 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
	if times = 8 then {
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
		prepend_asn(prepend_num,PREPEND_ASN);
	}
}

function add_type(string peer_type)
int neighbor_asn;
{
	if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="ibgp" || peer_type="grc") then {
		print "bgp_import: unknown peer_type:", peer_type;
		reject;
	}
	if bgp_path.len > 0 then{
		neighbor_asn = bgp_path.first;
	} else {
		neighbor_asn = OWNAS;
	}

	if (peer_type = "upstream" || ( neighbor_asn ~ large_asns && ( peer_type = "ixrs" || peer_type = "peer" ))) then {
		bgp_local_pref=190;
		bgp_large_community.add((MY_COMMUNITY, 201 ,0));
	} else if peer_type = "ixrs" then {
		bgp_local_pref=280;
		bgp_large_community.add((MY_COMMUNITY, 202 ,0));
		if bgp_path ~ t1_asns then reject;                   # reject t1_asns
	} else if peer_type = "peer" then {
		bgp_local_pref=290;
		bgp_large_community.add((MY_COMMUNITY, 203 ,0));
		if bgp_path ~ t1_asns then reject;                   # reject t1_asns
	} else if peer_type = "downstream" then {
		bgp_local_pref=390;
		bgp_large_community.add((MY_COMMUNITY, 204 ,0));
		if bgp_path ~ t1_asns then reject;                   # reject t1_asns
		if !no_as_loop(false) then reject;
	} else if peer_type = "ibgp" then {
		bgp_large_community.add((MY_COMMUNITY, 209 ,1));
	} else if peer_type = "grc" then {
		reject;
	}
}

function type_filter(int peer_asn; string peer_type) {
	if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="grc" || peer_type="ibgp") then {
		print "bgp_import: invalid peer_type";
		reject;
	}
	if peer_type = "upstream" then {
		if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
		if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
		if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
		if bgp_path ~ large_asns then reject;                              # reject T1 routes
		if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
		if bgp_large_community ~ [(MY_COMMUNITY, 209,1)] && bgp_large_community !~ [(MY_COMMUNITY, 205,1)] then reject; # reject ibgp routes
	} else if peer_type = "ixrs" then {
		if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
		if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
		if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
		if bgp_path ~ large_asns then reject;                              # reject T1 routes
		if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
	} else if peer_type = "peer" then {
		if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
		if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
		if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
		if bgp_path ~ large_asns then reject;                              # reject T1 routes
		if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
	} else if peer_type = "downstream" then {
		# export all routes to downstream
	} else if peer_type = "ibgp" then {
		# export all routes to ibgp
	} else if peer_type = "grc" then {
		if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
		if bgp_path ~ t1_asns then reject;
	}
}

function should_do_action (int action_base; int peer_asn; string peer_type)
int matched_actions;
int action_to_all_asn;
int action_not_to_asn;
int action_to_asn;
int action_to_all_region;
int action_not_to_region;
int action_to_region;
int action_to_all_country;
int action_not_to_country;
int action_to_country;
int action_to_peer_type;
{
	matched_actions       = 0;
	action_to_all_asn     = action_base;
	action_not_to_asn     = action_base + 1;
	action_to_asn         = action_base + 2;
	action_to_all_region  = action_base + 10;
	action_not_to_region  = action_base + 11;
	action_to_region      = action_base + 12;
	action_to_all_country = action_base + 20;
	action_not_to_country = action_base + 21;
	action_to_country     = action_base + 22;
	action_to_peer_type   = action_base + 30;
	if (MY_COMMUNITY, action_to_asn, peer_asn) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_asn, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_asn, peer_asn) !~ bgp_large_community )then {
		matched_actions = matched_actions + 1;
	}
	if (MY_COMMUNITY, action_to_region, MY_REGION) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_region, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_region, MY_REGION) !~ bgp_large_community )then {
		if !(action_base = 1000 && peer_type = "downstream" ) then {
			matched_actions = matched_actions + 1; # reject on region is not valid on downstream session
		}
	}
	if (MY_COMMUNITY, action_to_country, MY_COUNTRY) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_country, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_country, MY_COUNTRY) !~ bgp_large_community )then {
		if !(action_base = 1000 && peer_type = "downstream" ) then {
			matched_actions = matched_actions + 1; # reject on country is not valid on downstream session
		}
	}
	if (MY_COMMUNITY, action_to_peer_type, 1) ~ bgp_large_community && peer_type = "upstream"   then matched_actions = matched_actions + 1;
	if (MY_COMMUNITY, action_to_peer_type, 2) ~ bgp_large_community && peer_type = "ixrs"       then matched_actions = matched_actions + 1;
	if (MY_COMMUNITY, action_to_peer_type, 3) ~ bgp_large_community && peer_type = "peer"       then matched_actions = matched_actions + 1;
	if (MY_COMMUNITY, action_to_peer_type, 4) ~ bgp_large_community && peer_type = "downstream" then matched_actions = matched_actions + 1;
	if (MY_COMMUNITY, action_to_peer_type, 8) ~ bgp_large_community && peer_type = "grc"        then matched_actions = matched_actions + 1;
	return matched_actions;
}

function do_control_action(int peer_asn; string peer_type)
int matched_action;
{
	# Implement (MY_COMMUNITY,10__,0)   do not send to XXX
	matched_action = should_do_action(1000, peer_asn, peer_type);
	if matched_action > 0 then {
		reject;
	}
	# Implement (MY_COMMUNITY,11__,0)   prepend 1 to XXX
	matched_action = should_do_action(1100, peer_asn, peer_type);
		if matched_action > 0 then {
		prepend_asn_multi(matched_action,1,OWNAS);
	}
	# Implement (MY_COMMUNITY,12__,0)   prepend 2 to XXX
	matched_action = should_do_action(1200, peer_asn, peer_type);
	if matched_action > 0 then {
		prepend_asn_multi(matched_action,2,OWNAS);
	}
	# Implement (MY_COMMUNITY,14__,0)   prepend 4 to XXX
	matched_action = should_do_action(1400, peer_asn, peer_type);
		if matched_action > 0 then {
		prepend_asn_multi(matched_action,4,OWNAS);
	}
	# Implement (MY_COMMUNITY,18__,0)   prepend 8 to XXX
	matched_action = should_do_action(1800, peer_asn, peer_type);
		if matched_action > 0 then {
		prepend_asn_multi(matched_action,8,OWNAS);
	}
}

function path_whitelist(int set allowed_path)
{
	if delete(bgp_path,allowed_path).len > 0 then reject;
}

function net_whitelist(prefix set prefix_whitelist)
{
	if net !~ prefix_whitelist then {
		print bgp_path.first, ": filtered ", net, "are not in prefix_whitelist";
		reject;
	}
}

function ebgp_import(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist; int set asn_whitelist){
	delete_bogon_asn();
	if is_bogon_asn() || is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) || (bgp_path ~ asn_blacklist) then reject;
	bgp_large_community.delete([(MY_COMMUNITY, 0..999, *)]);
	bgp_large_community.delete([(MY_COMMUNITY, 10000..99999, *)]);
	bgp_large_community.add((MY_COMMUNITY, 205, 1)); # local route
	prepend_asn(prepend_num, OWNAS);
	add_geoinfo();
	add_type(peer_type);
	net_whitelist(prefix_whitelist);
	do_rpki_check();
	if 0 !~ asn_whitelist then {
		path_whitelist(asn_whitelist);
	}
	return true;
}

function ebgp_export(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist;  int set asn_whitelist) {
	if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
	if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
	if bgp_large_community ~ [(MY_COMMUNITY,  2,*)] then reject;                          # Implement (asn, 2,*)   do not send to ebgp
	type_filter(peer_asn, peer_type);
	bgp_large_community.delete([(MY_COMMUNITY, 205, 1)]);
	prepend_asn(prepend_num, OWNAS);
	do_control_action(peer_asn, peer_type);
	bgp_large_community.delete([(MY_COMMUNITY, 0..9999 , *)]);
	net_whitelist(prefix_whitelist);
	if 0 !~ asn_whitelist then {
		path_whitelist(asn_whitelist);
	}
	return true;
};

function ibgp_import() {
	bgp_large_community.add((MY_COMMUNITY, 209, 1)); # ibgp route
	bgp_large_community.delete((MY_COMMUNITY, 205, 1));
	ibgp_pref(); 
	return true;
};

function ibgp_export() {
	if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
	delete_last(1);
	bgp_large_community.delete((MY_COMMUNITY, 205, 1));
	if bgp_large_community ~ [(MY_COMMUNITY,  1,*)] then reject;                           # Implement (asn, 1,*)   do not send to ibgp
	add_geoinfo();
	return true;
};

function ibgp_import_lite() {
	bgp_large_community.add((MY_COMMUNITY, 209, 1)); # ibgp route
	bgp_large_community.delete((MY_COMMUNITY, 205, 1));
	if bgp_large_community ~ [(MY_COMMUNITY,201,*)] then reject;
	ibgp_pref(); 
	return true;
};

template bgp pubebgp {
	local as OWNAS;
	path metric 1;
	interpret communities on;
	enforce first as on;
	allow local as 1;
	enable extended messages on;
	graceful restart yes;
	long lived graceful restart yes;

	ipv6 {
		add paths on;
		import none;
		export none;
		import keep filtered on;
		import limit 999 action block;
		export limit 999 action block;
	};
};

template bgp pubibgp {
	local as INETCONFEDAS;
	path metric 1;
	multihop;
	enable extended messages on;
	confederation OWNAS;
	confederation member yes;
	graceful restart yes;
	long lived graceful restart yes;
	interpret communities off;
	source address OWNIPv6;
	bfd graceful;

	ipv6 {
		next hop self yes;
		import where ibgp_import();
		export where ibgp_export();
		import limit 10000000 action block;
	};
};

template bgp pubibgp_lite {
	local as INETCONFEDAS;
	path metric 1;
	multihop;
	enable extended messages on;
	confederation OWNAS;
	confederation member yes;
	graceful restart yes;
	long lived graceful restart yes;
	interpret communities off;
	source address OWNIPv6;
	bfd graceful;

	ipv6 {
		next hop self yes;
		import where ibgp_import_lite();
		export where ibgp_export();
		import limit 10000000 action block;
	};
}

ipv6 table rc_6;
template bgp rc_server {
	local as INETCONFEDAS;
	path metric 1;
	multihop;
	enable extended messages on;
	confederation OWNAS;
	confederation member yes;
	graceful restart yes;
	long lived graceful restart yes;
	interpret communities off;
	source address OWNIPv6;
	bfd graceful;

	ipv6 {
		add paths on;
		next hop self yes;
		import none;
		export filter {
			if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
			if bgp_path ~ t1_asns then reject;
			if bgp_large_community !~ [(MY_COMMUNITY, 205,1)] then reject;
			if ibgp_export() then accept;
			reject;
		};
	};
}

template bgp rc_client {
	local as INETCONFEDAS;
	path metric 1;
	multihop;
	enable extended messages on;
	confederation OWNAS;
	confederation member yes;
	graceful restart yes;
	long lived graceful restart yes;
	interpret communities off;
	source address OWNIPv6;
	bfd graceful;

	ipv6 {
		table rc_6;
		igp table master6;
		add paths on;
		import filter {
			bgp_large_community.add((MY_COMMUNITY,1,0));
			bgp_large_community.add((MY_COMMUNITY,3,0));
			accept;
		};
		export none;
	};
}
