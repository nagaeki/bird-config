template bgp dnpeers {
	router id DN42OWNIP;
	local as DN42OWNAS;
	path metric 1;
	direct;
	enable extended messages on;
	bfd yes;
	ipv4 {
		extended next hop on;
		next hop self yes;
		import filter {
			if dn42_is_valid_network() && !dn42_is_self_net() then {
				if (roa_check(dn42_roa, net, bgp_path.last) != ROA_VALID) then {
					print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
					reject;
				}
				if bgp_path = 1 then bgp_local_pref = 150;
				if (64511, DN42_COUNTRY) ~ bgp_community then bgp_local_pref = 120;
				if (64511, DN42_REGION) ~ bgp_community then bgp_local_pref = 110;
				accept;
			}
			reject;
		};
		export filter {
			if dn42_is_valid_network() && source ~ [RTS_STATIC, RTS_BGP] then {
				if source = RTS_STATIC then {
					bgp_community.add((64511, DN42_REGION));
					bgp_community.add((64511, DN42_COUNTRY));
				}
				accept;
			}
			reject;
		};
	};
	ipv6 {
		extended next hop on;
		next hop self yes;
		import filter {
			if dn42_is_valid_network_v6() && !dn42_is_self_net_v6() then {
				if (roa_check(dn42_roa6, net, bgp_path.last) != ROA_VALID) then {
					print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
					reject;
				}
				if bgp_path = 1 then bgp_local_pref = 150;
				if (64511, DN42_COUNTRY) ~ bgp_community then bgp_local_pref = 120;
				if (64511, DN42_REGION) ~ bgp_community then bgp_local_pref = 110;
				accept;
			}
			reject;
		};
		export filter {
			if dn42_is_valid_network_v6() && source ~ [RTS_STATIC, RTS_BGP] then {
				if source = RTS_STATIC then {
					bgp_community.add((64511, DN42_REGION));
					bgp_community.add((64511, DN42_COUNTRY));
				}
				accept;
			}
			reject;
		};
	};
};

template bgp dnnodes {
	router id DN42OWNIP;
	local as DN42CONFEDAS;
	path metric 1;
	direct;
	enable extended messages on;
	bfd yes;
	confederation DN42OWNAS;
	confederation member yes;
	ipv4 {
		extended next hop on;
		next hop self yes;
		import filter {
			if dn42_is_valid_network() && !dn42_is_self_net() then {
				if bgp_path = 1 then bgp_local_pref = 150;
				if (64511, DN42_COUNTRY) ~ bgp_community then bgp_local_pref = 120;
				if (64511, DN42_REGION) ~ bgp_community then bgp_local_pref = 110;
				accept;
			}
			reject;
		};
		export filter {
			if dn42_is_valid_network() then {
				if source = RTS_STATIC then {
					bgp_community.add((64511, DN42_REGION));
					bgp_community.add((64511, DN42_COUNTRY));
				}
				accept;
			}
			reject;
		};
    };
	ipv6 {
		extended next hop on;
		next hop self yes;
		import filter {
			if dn42_is_valid_network_v6() && !dn42_is_self_net_v6() then {
				if bgp_path = 1 then bgp_local_pref = 150;
				if (64511, DN42_COUNTRY) ~ bgp_community then bgp_local_pref = 120;
				if (64511, DN42_REGION) ~ bgp_community then bgp_local_pref = 110;
				accept;
			}
			reject;
		};
		export filter {
			if dn42_is_valid_network_v6() then {
				if source = RTS_STATIC then {
					bgp_community.add((64511, DN42_REGION));
					bgp_community.add((64511, DN42_COUNTRY));
				}
				accept;
			}
			reject;
		};
	};
};
